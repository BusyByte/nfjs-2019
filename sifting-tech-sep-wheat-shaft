how do we evaluate new tech

tempting to chase the newest thing

teach yourself new things effectively and efficienctly

education isn't something you finish

very strong opinions

fear of old things

predictable hype cycle

trial and error

pioneers are the ones with arrows in their back

strategic

deliberate

develope a routine: habit

block out friday over afternoon
tuesday over lunch
consider morning coffee

15-30 minutes per day in morning

attention does not scale

do not waiste it

be selective

can not get everything

in fact, you'll miss most everyting

hacker's radar

cover useful future but not predict future

beware of bias

lemming effect

skating to where the puck was

technology radar

google's 10% time

innovation Fridays

regular cadence to try things

Tuesday tech talk

architectural briefings

why should we use X?

what are the tradeoffs

cost

couple of hours, days in your environment

pick right project, not bet the company

what is your patching strategy

documentation

enough to get started and keep going

thriving?

friendly and welcome new members

make you feel inferior

community values

diversity

clean code

tests

regressions every time release

testability

when was last commit?  dead or mature?

changing rapidly, breaking changes, upgrade path

can consume changes at that pace

stability

extensibility

support

help online?

training

hiring

resume

feelings of the team

fit your company

"breaking change" for your organization

political roadblocks

licensing

good relationship

usage

spreadsheet and weigh options

harvey balls

what does your project need?

decision for corporate level?

or just for your project?

training?

strategic

current is not one and done

use your network

get hands dirty

Martin Fowler

analysis paralysis

no matter what will be wrong

over time changes

decisions with what you know today





